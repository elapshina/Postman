{
	"info": {
		"_postman_id": "290fe216-dd49-427e-a715-2dece33264d6",
		"name": "HW_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) необходимо залогиниться\r",
							"// POST\r",
							"// login : str (кроме /)\r",
							"// password : str\r",
							"// Приходящий токен необходимо передать во все остальные запросы.\r",
							"var ReqData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"token\", ReqData.token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "KateL",
							"type": "text"
						},
						{
							"key": "password",
							"value": "2407",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2) Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"  },\r",
							"}\r",
							"var RespData = pm.response.json();\r",
							"pm.test(\"Validate JSON schema\", function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var reqData = request.data;\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(RespData.start_qa_salary).to.eql+(reqData.salary);\r",
							"});\r",
							"pm.test(\"start_qa_salary * 2\", function () {\r",
							"    pm.expect(RespData.start_qa_salary*2).to.eql(RespData.qa_salary_after_6_months);\r",
							"});\r",
							"pm.test(\"start_qa_salary * 2.9\", function () {\r",
							"    pm.expect(RespData.start_qa_salary*2.9).to.eql(RespData.qa_salary_after_12_months);\r",
							"});\r",
							"pm.test(\"start_qa_salary * 4\", function () {\r",
							"    pm.expect(RespData.start_qa_salary*4).to.eql(RespData.person.u_salary_1_5_year);\r",
							"});\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user \r",
							"pm.environment.set(\"salary\", RespData.person.u_salary_1_5_year);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"age\": 32,\r\n\"salary\": 1000,\r\n\"name\": \"Kate\",\r\n\"auth_token\": \"{{token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2. Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  }\r",
							"}\r",
							"\r",
							"  var RespData = pm.response.json();\r",
							"  pm.test(\"Validate JSON schema\", function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;\r",
							"});\r",
							"console.log(tv4.error);\r",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"var ReqData = request.data;\r",
							"pm.test(\"request salary*1 = response salary [0]\", function () {\r",
							"    pm.expect(ReqData.salary).to.eql+(RespData.salary [0]);\r",
							"});\r",
							"pm.test(\"request salary*2 = response salary [1]\", function () {\r",
							"    pm.expect(ReqData.salary*2).to.eql+(RespData.salary [1]);\r",
							"});\r",
							"pm.test(\"request salary*3 = response salary [2]\", function () {\r",
							"    pm.expect(ReqData.salary*3).to.eql+(RespData.salary [2]);\r",
							"});\r",
							"// 4.проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"response salary[2] > response salary[1] and > response salary[0]\", function () {\r",
							"    pm.expect(+RespData.salary[2]).to.above(+RespData.salary[1]);\r",
							"    pm.expect(+RespData.salary[2]).to.above(+RespData.salary[0]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2. Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"properties\": {\r",
							"       \"age\":{\r",
							"           \"type\":\"integer\"},\r",
							"       \"daily_food\": {\r",
							"            \"type\":\"number\"},\r",
							"       \"daily_sleep\":{\r",
							"            \"type\":\"number\"},\r",
							"       \"name\": {\r",
							"           \"type\":\"string\"},\r",
							"    }\r",
							"}\r",
							"\r",
							"let RespData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;}\r",
							");\r",
							"console.log(tv4.error);\r",
							"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"let ReqData = request.data;\r",
							"pm.test(\"daily_food\", function () {\r",
							"    pm.expect(ReqData.weight*0.012).to.eql(RespData.daily_food);\r",
							"\r",
							"});\r",
							"pm.test(\"daily_sleep\", function () {\r",
							"    pm.expect(ReqData.weight*2.5).to.eql(RespData.daily_sleep);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "67",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 2. Проверка структуры json в ответе.\r",
							"let schema = {\r",
							"    \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  }\r",
							"}\r",
							"let RespData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(RespData, schema)).to.be.true;}\r",
							");\r",
							"console.log(tv4.error);\r",
							"// 3. Проверить что занчение поля name = значению переменной name из окружения\r",
							"pm.environment.set(\"name\",RespData.name);\r",
							"nameEnv = pm.environment.get(\"name\");\r",
							"\r",
							"pm.test(\"nameResp = nameEnv\", function () {\r",
							"    pm.expect(RespData.name).to.eql (nameEnv);\r",
							"});\r",
							"// 4. Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age\r",
							"let ReqData = request.data;\r",
							"pm.test(\"age = age\", function () {\r",
							"    pm.expect+(RespData.age).to.eql+(ReqData.age);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "32",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Kate",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					],
					"query": [
						{
							"key": null,
							"value": null,
							"disabled": true
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		}
	]
}